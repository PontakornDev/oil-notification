require("dotenv").config();
const express = require("express");
const axios = require("axios");
const nodemailer = require("nodemailer");
const cors = require("cors");
const oilType = require("./oil-type.json");

const app = express();
app.use(cors());
app.use(express.json());

let lastPrice = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô
async function getOilPrice() {
  try {
    const response = await axios.get(process.env.OIL_API_URL);
    return response;
  } catch (error) {
    console.error("‚ùå Error fetching oil price:", error);
    return null;
  }
}

// ‡∏™‡πà‡∏á Email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
async function sendEmail(subject, body) {
  let transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: false,
    auth: {
      user: process.env.EMAIL_SENDER,
      pass: process.env.EMAIL_PASSWORD,
    },
  });

  let mailOptions = {
    from: `"Oil Price Notifier" <${process.env.EMAIL_SENDER}>`,
    to: process.env.EMAIL_RECIPIENT,
    subject: subject,
    text: body,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log("‚úÖ Email sent successfully!");
  } catch (error) {
    console.error("‚ùå Error sending email:", error);
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
async function checkOilPrice() {
  console.log("üîç Checking oil price...");

  const prices = await getOilPrice();
  if (!prices) return;

  let message = "üì¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÑ‡∏ó‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n";
  let hasChange = false;
  let pttData = prices.data.response.stations.ptt;

  oilType.map((type, i) => {
    let newPrice = pttData[type].price;
    let oldPrice = lastPrice[type] || 0;
    if (+newPrice !== +oldPrice) {
      hasChange = true;
      let trend = newPrice > oldPrice ? "üî∫ ‡∏Ç‡∏∂‡πâ‡∏ô" : "üü¢ ‡∏•‡∏á";
      message += `${i + 1}. ${
        pttData[type].name
      }: ${newPrice} ‡∏ö‡∏≤‡∏ó/‡∏•‡∏¥‡∏ï‡∏£ (${trend})\n`;
    }

    lastPrice[type] = newPrice; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  });

  if (hasChange) {
    await sendEmail("üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", message);
  } else {
    console.log("‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á");
  }
}

// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
setInterval(checkOilPrice, 10 * 60 * 1000);

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô
const apiRouter = express.Router();
app.use("/api", apiRouter);

apiRouter.get("/", async (req, res) => {
  res.json({ message: "API is running..." });
});

apiRouter.get("/oil-price", async (req, res) => {
  checkOilPrice();
  const prices = await getOilPrice();
  if (prices) {
    return res.status(200).json(prices.data);
  } else {
    return res.status(400).json({ error: "Cannot fetch oil price" });
  }
});

app.listen(process.env.PORT, () => {
  checkOilPrice(); // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
  console.log(`üöÄ Server running on port ${process.env.PORT}`);
});
